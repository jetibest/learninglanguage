package languagelearning;

import java.util.List;
import java.util.ArrayList;

public class Environment implements Runnable
{
	public static final int DUST_MAX = 100;
	public static final int DUST_MIN = 0;
	public static final int DUST_INCREMENT_VALUE = 1;
	public static final long DUST_INCREMENT_INTERVAL = 100;
	
	private List<GridObject> objects = new ArrayList<GridObject>();
	private int[][] dustgrid = new int[LearningLanguage.GRID_HEIGHT][LearningLanguage.GRID_WIDTH]; 
	private Thread t;
	
	public Environment()
	{
		init();
	}
	
	private void init()
	{
		for(int i=0;i<LearningLanguage.GRID_HEIGHT;i++)
		{
			int[] row = new int[LearningLanguage.GRID_WIDTH];
			for(int j=0;j<LearningLanguage.GRID_WIDTH;j++)
			{
				row[j] = (int) (DUST_MAX*0.5 + Math.random()*DUST_MAX*0.5);
			}
			dustgrid[i] = row;
		}
		
		t = new Thread(this);
	}
	
	public void start()
	{
		t.start();
	}
	
	public void stop()
	{
		// No interrupt required here
	}
	
	@Override
	public void run()
	{
		LearningLanguage.MAIN.log(this.getClass().getName(), "Started!");
		
		long start;
		while(LearningLanguage.MAIN.isRunning())
		{
			start = System.currentTimeMillis();
			
			for(int i=0;i<LearningLanguage.GRID_HEIGHT;i++)
			{
				int[] row = new int[LearningLanguage.GRID_WIDTH];
				for(int j=0;j<LearningLanguage.GRID_WIDTH;j++)
				{
					row[j] += DUST_INCREMENT_VALUE;
				}
			}
			
			try
			{
				Thread.sleep(Math.max(0, DUST_INCREMENT_INTERVAL - (System.currentTimeMillis() - start)));
			}
			catch(Exception e)
			{
			}
		}
		
		LearningLanguage.MAIN.log(this.getClass().getName(), "Stopped!");
	}
	
	public int[][] getDustGrid()
	{
		return dustgrid;
	}
}
